{"version":3,"sources":["logo_alpaca.svg","Footer.js","Header.js","MintModal.js","MainComponent.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Footer","className","href","target","rel","Header","src","logo","MintModal","show","handleClose","txState","txHash","showSpinner","Modal","onHide","centered","Body","animation","style","color","includes","process","onClick","MainComponent","metaMaskAvailable","context","useState","setTxState","setShow","mintKey","setMintKey","assets","setAssets","useEffect","a","initialized","options","method","account","contract","alpacaToken","_address","fetch","result","json","fetchOpenSea","mintNFT","methods","send","from","gasLimit","response","console","log","transactionHash","marginBottom","Form","Control","type","placeholder","value","onChange","e","Button","disabled","Alert","variant","height","length","map","img","permalink","image_url","key","id","RelayProvider","require","web3","App","setGsnInitialized","config","paymasterAddress","Config","paymaster","chainId","loggerConfiguration","logLevel","newProvider","provider","window","currentProvider","init","Web3","eth","Contract","AlpacaToken","abi","getAccounts","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8OAAAA,EAAOC,QAAU,IAA0B,yC,i1wpBC4B5BC,EA1BA,WACb,OACE,4BAAQC,UAAU,WAChB,oCACS,IACP,uBACEC,KAAK,4BACLC,OAAO,SACPC,IAAI,uBAHN,UAFF,OASO,IACL,uBACEF,KAAK,yDACLC,OAAO,SACPC,IAAI,uBAHN,oBAVF,O,kBCUSC,EAZA,WACb,OACE,4BAAQJ,UAAU,WAChB,6BACE,wBAAIA,UAAU,uBACZ,yBAAKK,IAAKC,U,2BCoELC,EAxEG,SAAC,GAA4C,IAA1CC,EAAyC,EAAzCA,KAAMC,EAAmC,EAAnCA,YAAaC,EAAsB,EAAtBA,QAASC,EAAa,EAAbA,OACzCC,EAA0B,YAAZF,GAAqC,UAAZA,EAC7C,OACE,kBAACG,EAAA,EAAD,CAAOL,KAAMA,EAAMM,OAAQL,EAAaM,UAAQ,GAC9C,kBAACF,EAAA,EAAMG,KAAP,CAAYhB,UAAU,aACpB,yBAAKA,UAAU,mBACZY,EACC,oCACE,kBAAC,IAAD,CAASK,UAAU,SAASC,MAAO,CAAEC,MAAO,aAC5C,6BAFF,0BAGyB,6BAHzB,6BAKE,8BACO,OAANR,QAAM,IAANA,OAAA,EAAAA,EAAQS,SAAS,QAChB,uBACEnB,KAAI,0CAAqCU,GACzCT,OAAO,SACPC,IAAI,uBAHN,sBASU,YAAZO,EACF,oCACE,2CACc,6BADd,wBAIA,qGAIA,uBACET,KAAI,UAAKoB,+BAAL,eAAgDV,GACpDT,OAAO,SACPC,IAAI,uBAHN,iCAOA,6BACA,uBACEF,KAAI,UAAKoB,8BAAL,YACJnB,OAAO,SACPC,IAAI,uBAHN,yBASF,oCACE,yDACA,uBACEF,KAAI,0CAAqCU,GACzCT,OAAO,SACPC,IAAI,uBAHN,iCAMK,IARP,MASM,IACJ,uBAAGF,KAAK,IAAIqB,QAASb,GAArB,aAVF,S,2BCuEGc,EApHO,SAAC,GAAoC,IAAD,IAKpDZ,EALmBa,EAAiC,EAAjCA,kBAAmBC,EAAc,EAAdA,QAC1C,EAA8BC,mBAAS,WAAvC,mBAAOhB,EAAP,KAAgBiB,EAAhB,KACA,EAAwBD,oBAAS,GAAjC,mBAAOlB,EAAP,KAAaoB,EAAb,KACA,EAA8BF,mBAAS,MAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAA4BJ,mBAAS,IAArC,mBAAOK,EAAP,KAAeC,EAAf,KAGAC,qBAAU,YACU,uCAAG,kCAAAC,EAAA,0DACfT,EAAQU,YADO,wBAEXC,EAAU,CAAEC,OAAQ,OACpBC,EAAUb,EAAQa,QAClBC,EAAWd,EAAQe,YAAYC,SAJpB,SAKIC,MAAM,uDAAD,OAC+BJ,EAD/B,mCACiEC,EADjE,2CAExBH,GAPe,cAKXO,EALW,YASjBX,EATiB,UASDW,EAAOC,OATN,+EAAH,qDAYlBC,KACC,CAACpB,EAAQU,cAEZ,IAAMW,EAAO,uCAAG,4BAAAZ,EAAA,6DACdN,GAAQ,GACRD,EAAW,WAFG,kBAIWF,EAAQe,YAAYO,QAAQD,QAAQjB,GAASmB,KAAK,CACvEC,KAAMxB,EAAQa,QACdY,SAAU,WANA,OAINC,EAJM,OAQZC,QAAQC,IAAIF,GACZxC,EAASwC,EAASG,gBAClB3B,EAAW,WAVC,kDAYZyB,QAAQC,IAAR,MACA1B,EAAW,SAbC,0DAAH,qDAiBb,OACE,yBAAK3B,UAAU,8DACb,kBAAC,EAAD,MAEA,0BAAMA,UAAU,QACd,4DACA,uBAAGA,UAAU,QAAb,sCACqC,6BADrC,gDAIA,uBAAGA,UAAU,QACX,yBAAKA,UAAU,iBAAiBkB,MAAO,CAAEqC,aAAc,KACrD,kBAACC,EAAA,EAAKC,QAAN,CACEC,KAAK,OACLC,YAAY,sBACZC,MAAO/B,EACPgC,SAAU,SAACC,GAAD,OAAOhC,EAAWgC,EAAE5D,OAAO0D,WAGzC,kBAACG,EAAA,EAAD,CACE/D,UAAW,wBACXsB,QAASwB,EACTkB,UAAWxC,GAEVC,EAAQU,YAAc,WAAa,gBAGtCX,GACA,kBAACyC,EAAA,EAAD,CAAOC,QAAQ,UAAf,sBACsB,IACpB,uBACEjE,KAAK,uBACLC,OAAO,SACPC,IAAI,uBAHN,YAMK,IARP,4BAYF,yBAAKe,MAAO,CAAEiD,OAAQ,OACb,OAANpC,QAAM,IAANA,GAAA,UAAAA,EAAQA,cAAR,eAAgBqC,QAAS,GACxB,oCACE,kDACA,oCACGrC,QADH,IACGA,GADH,UACGA,EAAQA,cADX,aACG,EAAgBsC,KAAI,SAACC,GACpB,OACE,uBACErE,KAAMqE,EAAIC,UACVrE,OAAO,SACPC,IAAI,uBAEJ,kBAAC,IAAD,CACEE,IAAKiE,EAAIE,UACTC,IAAKH,EAAII,GACTxD,MAAO,CAAEiD,OAAQ,eAUnC,kBAAC,EAAD,CACE3D,KAAMA,EACNC,YAAa,kBAAMmB,GAAQ,IAC3BlB,QAASA,EACTC,OAAQA,IAEV,kBAAC,EAAD,Q,SCnHEgE,EAAkBC,EAAQ,KAA1BD,cAEJlD,EAAU,CACZoD,KAAM,KACNrC,YAAa,KACbF,QAAS,KACTH,aAAa,GAuEA2C,EApEH,WACV,MAAkDpD,oBAAS,GAA3D,mBAAOF,EAAP,KACA,GADA,KAC4CE,oBAAS,IAArD,mBAAuBqD,GAAvB,WA6DA,OA1DA9C,qBAAU,YACE,uCAAG,gCAAAC,EAAA,sEAEH8C,EAAS,CACbC,iBAAkBC,EAAOC,UACzBC,QAAS/D,MACTgE,oBAAqB,CACnBC,SAAU,UANL,SAScX,EAAcY,YAAY,CAC/CC,SAAQ,UAAEC,OAAOZ,YAAT,aAAE,EAAaa,gBACvBV,WACCW,OAZM,cASHH,EATG,OAaT/D,EAAQoD,KAAO,IAAIe,IAAKJ,GACxB/D,EAAQe,YAAc,IAAIf,EAAQoD,KAAKgB,IAAIC,SACvCC,EAAYC,IACZd,EAAO1C,aAhBF,SAkBgBf,EAAQoD,KAAKgB,IAAII,cAlBjC,OAkBTxE,EAAQa,QAlBC,OAkBgD,GACzDb,EAAQU,aAAc,EACtB4C,GAAkB,GApBT,kDAsBT3B,QAAQC,IAAR,MAtBS,0DAAH,qDAyBVsC,KACC,IAGH1D,qBAAU,cA0BP,IAGD,kBAAC,EAAD,CAAeT,kBAAmBA,EAAmBC,QAASA,K,OClE9CyE,QACW,cAA7BT,OAAOU,SAASC,UAEe,UAA7BX,OAAOU,SAASC,UAEhBX,OAAOU,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAACC,GAClCA,EAAaC,kB","file":"static/js/main.ce33dad7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo_alpaca.1ea0fed7.svg\";","import React from \"react\";\n\nconst Footer = () => {\n  return (\n    <footer className=\"mt-auto\">\n      <p>\n        See on{\" \"}\n        <a\n          href=\"https://getbootstrap.com/\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Github\n        </a>\n        , by{\" \"}\n        <a\n          href=\"https://www.linkedin.com/in/sebastian-illing-62320249/\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Sebastian Illing\n        </a>\n        .\n      </p>\n    </footer>\n  );\n};\n\nexport default Footer;\n","import React from \"react\";\nimport logo from \"./logo_alpaca.svg\";\n\nconst Header = () => {\n  return (\n    <header className=\"mb-auto\">\n      <div>\n        <h3 className=\"float-md-start mb-0\">\n          <img src={logo} />\n        </h3>\n      </div>\n    </header>\n  );\n};\n\nexport default Header;\n","import React from \"react\";\nimport Modal from \"react-bootstrap/Modal\";\nimport Spinner from \"react-bootstrap/cjs/Spinner\";\n\nconst MintModal = ({ show, handleClose, txState, txHash }) => {\n  const showSpinner = txState !== \"success\" && txState !== \"error\";\n  return (\n    <Modal show={show} onHide={handleClose} centered>\n      <Modal.Body className=\"mintModal\">\n        <div className=\"vertical-center\">\n          {showSpinner ? (\n            <>\n              <Spinner animation=\"border\" style={{ color: \"#ff6968\" }} />\n              <br />\n              Processing Transaction <br />\n              (This can take a few mins)\n              <br />\n              {txHash?.includes(\"0x\") && (\n                <a\n                  href={`https://rinkeby.etherscan.io/tx/${txHash}`}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  View on Etherscan\n                </a>\n              )}\n            </>\n          ) : txState === \"success\" ? (\n            <>\n              <h3>\n                Alpaca NFTs <br />\n                successfully minted!\n              </h3>\n              <p>\n                Note: It can take a few minutes until your NFTs show up in your\n                wallet\n              </p>\n              <a\n                href={`${process.env.REACT_APP_BLOCK_EXPLORER}/tx/${txHash}`}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                View transaction on Etherscan\n              </a>\n              <br />\n              <a\n                href={`${process.env.REACT_APP_OPEN_SEA}/account`}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                View NFTs on OpenSea\n              </a>\n            </>\n          ) : (\n            <>\n              <h3>Ups something went wrong.</h3>\n              <a\n                href={`https://rinkeby.etherscan.io/tx/${txHash}`}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                View transaction on Etherscan\n              </a>{\" \"}\n              and{\" \"}\n              <a href=\"#\" onClick={handleClose}>\n                try again\n              </a>\n              .\n            </>\n          )}\n        </div>\n      </Modal.Body>\n    </Modal>\n  );\n};\n\nexport default MintModal;\n","import React, { useEffect, useState } from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\nimport Footer from \"./Footer\";\nimport Header from \"./Header\";\nimport MintModal from \"./MintModal\";\nimport Image from \"react-bootstrap/cjs/Image\";\nimport Alert from \"react-bootstrap/Alert\";\n\nconst MainComponent = ({ metaMaskAvailable, context }) => {\n  const [txState, setTxState] = useState(\"pending\");\n  const [show, setShow] = useState(false);\n  const [mintKey, setMintKey] = useState(null);\n  const [assets, setAssets] = useState([]);\n  let txHash;\n\n  useEffect(() => {\n    const fetchOpenSea = async () => {\n      if (context.initialized) {\n        const options = { method: \"GET\" };\n        const account = context.account;\n        const contract = context.alpacaToken._address;\n        const result = await fetch(\n          `https://testnets-api.opensea.io/api/v1/assets?owner=${account}&asset_contract_address=${contract}&order_direction=desc&offset=0&limit=20`,\n          options\n        );\n        setAssets(await result.json());\n      }\n    };\n    fetchOpenSea();\n  }, [context.initialized]);\n\n  const mintNFT = async () => {\n    setShow(true);\n    setTxState(\"pending\");\n    try {\n      const response = await context.alpacaToken.methods.mintNFT(mintKey).send({\n        from: context.account,\n        gasLimit: \"500000\",\n      });\n      console.log(response);\n      txHash = response.transactionHash;\n      setTxState(\"success\");\n    } catch (e) {\n      console.log(e);\n      setTxState(\"error\");\n    }\n  };\n\n  return (\n    <div className=\"cover-container d-flex w-100 h-100 p-3 mx-auto flex-column\">\n      <Header />\n\n      <main className=\"px-3\">\n        <h1>Get your personal Alpaca NFT</h1>\n        <p className=\"lead\">\n          Mint your Alpaca NFT now for free! <br />\n          You don't need to pay any transaction costs.\n        </p>\n        <p className=\"lead\">\n          <div className=\"col-6 offset-3\" style={{ marginBottom: 20 }}>\n            <Form.Control\n              type=\"text\"\n              placeholder=\"Enter your mint key\"\n              value={mintKey}\n              onChange={(e) => setMintKey(e.target.value)}\n            />\n          </div>\n          <Button\n            className={\"btn btn-lg btn-orange\"}\n            onClick={mintNFT}\n            disabled={!metaMaskAvailable}\n          >\n            {context.initialized ? \"Mint NFT\" : \"Loading...\"}\n          </Button>\n        </p>\n        {!metaMaskAvailable && (\n          <Alert variant=\"danger\">\n            You have to install{\" \"}\n            <a\n              href=\"https://metamask.io/\"\n              target=\"_blank\"\n              rel=\"noopener norefferer\"\n            >\n              MetaMask\n            </a>{\" \"}\n            to be able mint your NFT\n          </Alert>\n        )}\n        <div style={{ height: 150 }}>\n          {assets?.assets?.length > 0 && (\n            <>\n              <div>Your Alpaca NFTs:</div>\n              <div>\n                {assets?.assets?.map((img) => {\n                  return (\n                    <a\n                      href={img.permalink}\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      <Image\n                        src={img.image_url}\n                        key={img.id}\n                        style={{ height: 100 }}\n                      />\n                    </a>\n                  );\n                })}\n              </div>\n            </>\n          )}\n        </div>\n      </main>\n      <MintModal\n        show={show}\n        handleClose={() => setShow(false)}\n        txState={txState}\n        txHash={txHash}\n      />\n      <Footer />\n    </div>\n  );\n};\n\nexport default MainComponent;\n","import Web3 from \"web3\";\nimport React, { useEffect, useState } from \"react\";\nimport Config from \"./contracts/config.json\";\nimport MainComponent from \"./MainComponent\";\nimport AlpacaToken from \"./contracts/AlpacaToken.json\";\nconst { RelayProvider } = require(\"@opengsn/provider\");\n\nlet context = {\n  web3: null,\n  alpacaToken: null,\n  account: null,\n  initialized: false,\n};\n\nconst App = () => {\n  const [metaMaskAvailable, setMetaMaskAvailable] = useState(true);\n  const [gsnInitialized, setGsnInitialized] = useState(false);\n\n  // Initialize GSN and contracts\n  useEffect(() => {\n    const init = async () => {\n      try {\n        const config = {\n          paymasterAddress: Config.paymaster,\n          chainId: process.env.REACT_APP_CHAIN_ID,\n          loggerConfiguration: {\n            logLevel: \"debug\",\n          },\n        };\n        const provider = await RelayProvider.newProvider({\n          provider: window.web3?.currentProvider,\n          config,\n        }).init();\n        context.web3 = new Web3(provider);\n        context.alpacaToken = new context.web3.eth.Contract(\n            AlpacaToken.abi,\n            Config.alpacaToken\n        );\n        context.account = (await context.web3.eth.getAccounts())[0];\n        context.initialized = true;\n        setGsnInitialized(true);\n      } catch (e) {\n        console.log(e);\n      }\n    };\n    init();\n  }, []);\n\n  // Switch to contract network\n  useEffect(() => {\n    if (process.env.REACT_APP_ENVIRONMENT === \"production\") {\n      if (window.ethereum) {\n        const switchNetwork = async () => {\n          window.ethereum.request({\n            method: \"wallet_addEthereumChain\",\n            params: [\n              {\n                chainId: process.env.REACT_APP_CHAIN_ID,\n                chainName: process.env.REACT_APP_CHAIN_NAME,\n                nativeCurrency: {\n                  name: process.env.REACT_APP_CHAIN_CURRENCY,\n                  symbol: process.env.REACT_APP_CHAIN_CURRENCY,\n                  decimals: 18,\n                },\n                rpcUrls: [process.env.REACT_APP_RPC_URL],\n                blockExplorerUrls: [process.env.REACT_APP_BLOCK_EXPLORER],\n              },\n            ],\n          });\n        };\n        switchNetwork();\n      } else {\n        setMetaMaskAvailable(false);\n      }\n    }\n  }, []);\n\n  return (\n    <MainComponent metaMaskAvailable={metaMaskAvailable} context={context} />\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}